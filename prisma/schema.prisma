generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_level {
  id     String   @id
  name    String   @unique
  user    user[]  @relation("UserHasLevel")
}

model user {
  id_user         String       @id @default(uuid())
  id_level        String
  user_name       String
  user_email      String       @unique
  user_password   String
  profile_picture String?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  deleted_at      DateTime?

  level           user_level? @relation("UserHasLevel", fields: [id_level], references: [id])
  reviews         review[]  @relation("UserReview")
  favorites       favorite[]  @relation("UserHasFavorite")
}

model category {
  id_category   String       @id @default(uuid())
  category_name String
  description   String

  technologies  technology[] @relation("TechnologyHasCategory")
}

model technology {
  id_tech       String       @id @default(uuid())
  id_category   String
  tech_name     String       @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  deleted_at    DateTime?

  category      category     @relation("TechnologyHasCategory", fields: [id_category], references: [id_category])
  reviews       review[]     @relation("TechnologyReview")
  techFavorites tech_favorite[]     @relation("TechnologyFavorite")
  comparisons   comparison[]     @relation("TechnologyHasComparison")
}

model review {
  id_review     String     @id @default(uuid())
  id_tech       String
  id_user       String
  title_review  String
  content       String
  rating        Decimal    @db.Decimal(2,1)
  thumbnail     String?
  created_at    DateTime   @default(now())
  updated_at    DateTime     @updatedAt
  deleted_at    DateTime?

  user          user      @relation("UserReview", fields: [id_user], references: [id_user])
  technology    technology @relation("TechnologyReview", fields: [id_tech], references: [id_tech])
}

model favorite {
  id_favorite   String     @id @default(uuid())
  id_user       String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  user          user      @relation("UserHasFavorite", fields: [id_user], references: [id_user])
  techFavorites tech_favorite[] @relation("FavoriteTechnology")
}

model tech_favorite {
  id_favorite   String
  id_tech       String

  favorite      favorite   @relation("FavoriteTechnology", fields: [id_favorite], references: [id_favorite])
  technology    technology @relation("TechnologyFavorite", fields: [id_tech], references: [id_tech])

  @@id([id_favorite, id_tech])
}

model comparison{
  id_detail     String     @id @default(uuid())
  id_tech       String
  image_comparison      String
  key_spec      String    
  value_spec    String  
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?   
  
  technology    technology @relation("TechnologyHasComparison", fields: [id_tech], references: [id_tech])
}